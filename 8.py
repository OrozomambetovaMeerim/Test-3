# Что такое "метаклассы"? Что такое "метапрограммирование"? 

# Метапрограммирование в Python основано на новом особом типе классов, которые называются метаклассами. Этот тип класса, вкратце, содержит инструкции о закулисной генерации кода, который вы хотите получить, запуская другой код.

# МЕТАКЛАСС (АНГЛ. METACLASS) — В ОБЪЕКТНО-ОРИЕНТИРОВАННОМ ПРОГРАММИРОВАНИИ ЭТО КЛАСС, ЭКЗЕМПЛЯРЫ КОТОРОГО В СВОЮ ОЧЕРЕДЬ ЯВЛЯЮТСЯ КЛАССАМИ.
# Метакласс — это класс, который определяет свойства других классов. С помощью метакласса мы можем определять свойства, которые следует добавить к новым классам, определяемымв нашем коде.

hello_metaclass.py
# Простой метакласс
# Этот метакласс добавляет метод 'hello' к классам, использующим его значение,
# те классы получают метод 'hello' без лишних усилий
# метакласс заботится о генерации кода для нас
class HelloMeta(type):  
    # Метод hello
    def hello(cls):
        print("greetings from %s, a HelloMeta type class" % (type(cls())))

    # Вызываем метакласс
    def __call__(self, *args, **kwargs):
        # создаём новый класс как обычно
        cls = type.__call__(self, *args)

        # определяем новый метод hello для каждого из этих классов
        setattr(cls, "hello", self.hello)

        # возвращаем класс
        return cls

# Проверяем метакласс
class TryHello(object, metaclass=HelloMeta):  
    def greet(self):
        self.hello()

# Создаём экземпляр метакласса. Он должен автоматически содержать метод hello
# хотя он не объявлен в классе вручную
# иными словами, он объявлен за нас метаклассом
greeter = TryHello()  
greeter.greet()