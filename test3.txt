Наследование позволяет создавать новый класс на основе уже существующего класса. 

Инкапсуляция — ограничение доступа к составляющим объект компонентам (методам и переменным). Инкапсуляция делает некоторые из компонент доступными только внутри класса.
Инкапсуляция в Python работает лишь на уровне соглашения между программистами о том, какие атрибуты являются общедоступными, а какие — внутренними.

Полиморфизм позволяет изменять функции в классах наследниках. 

Абстрактным называется класс, который содержит один и более абстрактных методов. Абстрактным называется объявленный, но не реализованный метод. Абстрактные классы не могут быть инстанциированы, от них нужно унаследовать, реализовать все их абстрактные методы и только тогда можно создать экземпляр такого класса. В Python отсутствует встроенная поддержка абстрактных классов, для этой цели используется модуль abc (Abstract Base Class)

Композиция : Она позволяет обрабатывать группу объектов так же, как и один экземпляр объекта. Цель композита состоит в том, чтобы объединить объекты в древовидные структуры для представления иерархий "часть-целое ".
Наследование: класс наследует поля и методы от всех своих суперклассов, прямых или косвенных. 

Итератор (iterator) - это объект, который возвращает свои элементы по одному за раз.
С точки зрения Python - это любой объект, у которого есть метод __next__. Этот метод возвращает следующий элемент, если он есть, или возвращает исключение StopIteration, когда элементы закончились.

Генератор — это итератор, который работает в режиме обработки по необходимости.
Доступно два способа создания generator: выражение генератора и функция генератора.
Выражение-генератор похож на преобразование списка, за исключением детали (). Раз generator является итератором, мы пользуемся функцией next, чтобы получить следующий элемент.

Метапрограммирование в Python основано на новом особом типе классов, которые называются метаклассами. Этот тип класса, вкратце, содержит инструкции о закулисной генерации кода, который вы хотите получить, запуская другой код.
МЕТАКЛАСС (АНГЛ. METACLASS) — В ОБЪЕКТНО-ОРИЕНТИРОВАННОМ ПРОГРАММИРОВАНИИ ЭТО КЛАСС, ЭКЗЕМПЛЯРЫ КОТОРОГО В СВОЮ ОЧЕРЕДЬ ЯВЛЯЮТСЯ КЛАССАМИ.
Метакласс — это класс, который определяет свойства других классов. С помощью метакласса мы можем определять свойства, которые следует добавить к новым классам, определяемымв нашем коде.

 Миксины – что это?
Часто их еще называют примесями, которые позволяют заранее определить стили которые можно будет использовать повторно. В целом туда можно вставлять как одно свойство, так и целое множество. Естественно ради одного свойства создавать целый миксин нет смысла, но если грамотно определить целый ряд всяких возможностей или построить какую-то удобную функцию то с этим можно в разы упростить процесс разработки.

Определение класса
Для определения класса используется оператор class:

class имя_класса(надкласс1, надкласс2, ...):
определения атрибутов и методов класса
У класса могут быть базовые (родительские) классы (надклассы), которые, если они есть, указываются в скобках после имени определяемого класса.
В терминологии Python члены класса называются атрибутами, функции класса — методами, а поля класса — свойствами (или просто атрибутами).



